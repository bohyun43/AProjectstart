
언리얼 Object 역할.


// UE4 Game Flow
//--------------------------------------------------------
[Editor]														[StandAlone]
UEditorEngine::init()											UGameEngine::Init()
UEngine::Start()

<Play In Editor> Click
UGameInstance Create											UGameInstance Create
UGameInstance::InitializePIE()									UGameInstance::InitializeStandalone()
UGameInstance::Init()											UGameInstance::Init()
UOnlineSession Create[register delegates]						UOnlineSession Create[register delegates]
UEditorEngine::CreatePIEGameInstance()
UEditorEngine::StartPIEGameInstance()							UEngine::Start()

                                [Combine]
	                            UWorld::BeginPlay()
	                            AGameMode::StartPlay()
	                            AGameMode::StartMatch()
	                            ... Flow


// UGameInstance 
//--------------------------------------------------------
적용 : [프로젝트 설정] >[프로젝트 - 맵&모드] > GameInstance 등록.



// UGameMode
//--------------------------------------------------------
1. 플레이 컨트롤 생성
2. 폰 생성
3. 빙의
4. 게임 시작.

InitGame
    : 이것은 PreInitializeComponentsGame Mode 인스턴스 자체를 포함하여 Actor가 실행되기 전에 호출 됩니다.

PreLogin
    : 서버에 참여하려는 플레이어를 수락하거나 거부합니다. 
      Login 실패시 원인으로, ErrorMessage 빈 문자열이 아닌 값으로 설정된다.
      Login 전에 PreLogin 이 호출되며, 합류 플레이어가 게임 콘텐츠를 다운로드 할 필요등에 의해, 로그인하기 전에 통과 할 시 상당한 시간이 필요할수 있다.

PostLogin
    : 로그인에 성공하면 호출됩니다. 
      복제 함수를 호출하는 것이 가장 안전한 곳은 PlayerController입니다. 
      OnPostLogin 여분의 로직을 추가하기 위해 Blueprint에 구현 될 수 있습니다.

HandleStartingNewPlayer
    : PostLogin 후 or Seamless travel 후에 호출된다.
    : Blueprint에서 재정의하여 새 플레이어의 상황을 바꿀 수 있습니다. 기본적으로 플레이어에 대한 폰을 만듭니다.

RestartPlayer
    : 이것은 플레이어의 폰 생성을 시작하기 위해 호출됩니다.
      이 또한 RestartPlayerAtPlayerStart및 RestartPlayerAtTransform 당신이 폰이 양산 될 위치를 지시 할 경우 사용할 수있는 기능입니다. 
      OnRestartPlayer이 기능이 완료된 후 Blueprint에서 로직을 추가 할 수 있습니다.

SpawnDefaultPawnAtTransform
    : 이것은 실제로 플레이어의 Pawn을 생성하고 Blueprint에서 재정의 할 수 있습니다.

Logout
    : 플레이어가 게임을 떠나거나 파괴되었을 때 호출됩니다.  OnLogoutBlueprint 로직을 구현할 수 있습니다.


// GameState
//--------------------------------------------------------
게임의 데이터를 관리하는 기본 클래스.
	- 멀티 플레이 게임 개발시 게임 상태에 대한 관리 지원
	- 전체 게임 정보 관리.



// APlayerController
//--------------------------------------------------------
플레이어 제어를 관리하는 기본 클래스

GameMode:PostLogin() 함수에서 구성이 완료되므로, 함수에서 초기화등의 기능을 구현해야 한다.

* Tip: Cmd(~) > displayall PlayerController ControlRotation > 컨트롤회전 값 확인.



// AIController
//--------------------------------------------------------
BlackBoard, BehaviorTree 를 통해 AI 구성.

Build.cs "AIModule" 등록.

* Tip: Alt + P 비헤비어트리 로직 흐름 확인 (Debug)